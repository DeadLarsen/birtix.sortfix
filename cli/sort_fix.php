#!/usr/bin/env php
<?php

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
$_SERVER["DOCUMENT_ROOT"] = realpath(__DIR__ . "/../../../../");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —è–¥—Ä–æ Bitrix
require_once $_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php";

use Bitrix\Main\Loader;
use Bitrix\SortFix\Services\SortFixService;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
if (!Loader::includeModule('bitrix.sortfix')) {
    echo "–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å bitrix.sortfix –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
    exit(1);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
 */
function showHelp() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php sort_fix.php [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]\n\n";
    echo "–ö–æ–º–∞–Ω–¥—ã:\n";
    echo "  stats                           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º\n";
    echo "  check [iblock_id]               - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞)\n";
    echo "  fix [iblock_id] [--backup]      - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞)\n";
    echo "  backup [iblock_id] [name]       - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø —Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ–π –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞)\n";
    echo "  backup-list                     - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤\n";
    echo "  restore <backup_name> [iblock_id] - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞\n";
    echo "  backup-delete <backup_name>     - –£–¥–∞–ª–∏—Ç—å –±–µ–∫–∞–ø\n";
    echo "  help                            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
    echo "–û–ø—Ü–∏–∏:\n";
    echo "  --backup                        - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã fix)\n\n";
    echo "–ü—Ä–∏–º–µ—Ä—ã:\n";
    echo "  php sort_fix.php stats                           # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n";
    echo "  php sort_fix.php check                           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏–Ω—Ñ–æ–±–ª–æ–∫–∏\n";
    echo "  php sort_fix.php check 384                       # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ–±–ª–æ–∫ 384\n";
    echo "  php sort_fix.php fix --backup                    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–µ–∫–∞–ø–∞\n";
    echo "  php sort_fix.php fix 384 --backup                # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ–±–ª–æ–∫ 384 —Å –±–µ–∫–∞–ø–æ–º\n";
    echo "  php sort_fix.php backup                          # –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã\n";
    echo "  php sort_fix.php backup 384                      # –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ 384\n";
    echo "  php sort_fix.php backup 384 my_backup            # –°–æ–∑–¥–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø\n";
    echo "  php sort_fix.php backup-list                     # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤\n";
    echo "  php sort_fix.php restore backup_name             # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É\n";
    echo "  php sort_fix.php restore backup_name 384         # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ–±–ª–æ–∫ 384\n";
    echo "  php sort_fix.php backup-delete backup_name       # –£–¥–∞–ª–∏—Ç—å –±–µ–∫–∞–ø\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function showStats(SortFixService $service) {
    echo "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ò–ù–§–û–ë–õ–û–ö–û–í ===\n\n";
    
    $stats = $service->getElementsStats();
    
    echo "–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: " . $stats['total_elements'] . "\n\n";
    
    if (!empty($stats['iblock_stats'])) {
        printf("%-5s %-30s %-20s %-10s %-10s %-10s\n", 
            "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–≠–ª–µ–º–µ–Ω—Ç–æ–≤", "Min SORT", "Max SORT");
        echo str_repeat("-", 95) . "\n";
        
        foreach ($stats['iblock_stats'] as $iblock) {
            printf("%-5s %-30s %-20s %-10s %-10s %-10s\n",
                $iblock['IBLOCK_ID'],
                mb_substr($iblock['IBLOCK_NAME'], 0, 30),
                mb_substr($iblock['IBLOCK_CODE'], 0, 20),
                $iblock['element_count'],
                $iblock['min_sort'],
                $iblock['max_sort']
            );
        }
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function checkNeedsFixing(SortFixService $service, $iblockId = null) {
    echo "=== –ü–†–û–í–ï–†–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===\n\n";
    
    $check = $service->checkSortNeedsFixing($iblockId);
    
    if ($check['needs_fixing']) {
        echo "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:\n\n";
        
        if ($check['has_duplicates']) {
            echo "   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {$check['duplicates_count']} –≥—Ä—É–ø–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π\n";
        }
        
        if ($check['non_standard_count'] > 0) {
            echo "   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {$check['non_standard_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –Ω–µ –∫—Ä–∞—Ç–Ω–æ–π 100\n";
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
        if (!$iblockId && !empty($check['problem_iblocks'])) {
            echo "\nüìã –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–§–û–ë–õ–û–ö–ò:\n\n";
            
            printf("%-5s %-30s %-20s %-10s %-15s %-15s\n", 
                "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–≠–ª–µ–º–µ–Ω—Ç–æ–≤", "–î—É–±–ª–∏–∫–∞—Ç—ã", "–ù–µ–∫—Ä–∞—Ç–Ω—ã–µ 100");
            echo str_repeat("-", 100) . "\n";
            
            foreach ($check['problem_iblocks'] as $iblock) {
                $duplicates = $iblock['has_duplicates'] ? "–î–∞" : "–ù–µ—Ç";
                $nonStandard = $iblock['has_non_standard'] ? "–î–∞ ({$iblock['non_standard_count']})" : "–ù–µ—Ç";
                
                printf("%-5s %-30s %-20s %-10s %-15s %-15s\n",
                    $iblock['id'],
                    mb_substr($iblock['name'], 0, 30),
                    mb_substr($iblock['code'], 0, 20),
                    $iblock['total_elements'],
                    $duplicates,
                    $nonStandard
                );
            }
            
            echo "\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n";
            echo "   php sort_fix.php fix <IBLOCK_ID>\n";
        }
    } else {
        echo "‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ\n";
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function fixSort(SortFixService $service, $iblockId = null, $createBackup = false) {
    $scope = $iblockId ? "–∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}" : "–≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤";
    echo "=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò ({$scope}) ===\n\n";
    
    if ($createBackup) {
        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º...\n";
    }
    
    echo "–ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...\n";
    
    $result = $service->fixElementsSort($iblockId, $createBackup);
    
    if ($result['success']) {
        echo "‚úÖ " . $result['message'] . "\n";
        
        if (isset($result['backup_created']) && $result['backup_created']) {
            echo "üì¶ –°–æ–∑–¥–∞–Ω –±–µ–∫–∞–ø: " . $result['backup_name'] . " ({$result['backup_records']} –∑–∞–ø–∏—Å–µ–π)\n";
        }
    } else {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞
 */
function createBackup(SortFixService $service, $iblockId = null, $backupName = null) {
    $scope = $iblockId ? "–∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}" : "–≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã";
    echo "=== –°–û–ó–î–ê–ù–ò–ï –ë–ï–ö–ê–ü–ê ({$scope}) ===\n\n";
    
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞...\n";
    
    $result = $service->createBackup($iblockId, $backupName);
    
    if ($result['success']) {
        echo "‚úÖ " . $result['message'] . "\n";
        echo "üì¶ –ò–º—è –±–µ–∫–∞–ø–∞: " . $result['backup_name'] . "\n";
        echo "üìä –ó–∞–ø–∏—Å–µ–π: " . $result['records_count'] . "\n";
    } else {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ–∫–∞–ø–æ–≤
 */
function listBackups(SortFixService $service) {
    echo "=== –°–ü–ò–°–û–ö –ë–ï–ö–ê–ü–û–í ===\n\n";
    
    $result = $service->listBackups();
    
    if (!$result['success']) {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    
    if (empty($result['backups'])) {
        echo "üì≠ –ë–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n";
        return;
    }
    
    printf("%-40s %-10s %-8s %-20s %-20s\n", 
        "–ò–º—è –±–µ–∫–∞–ø–∞", "–ó–∞–ø–∏—Å–µ–π", "–†–∞–∑–º–µ—Ä –ú–ë", "–°—Ç–∞—Ä–µ–π—à–∞—è –∑–∞–ø–∏—Å—å", "–ù–æ–≤–µ–π—à–∞—è –∑–∞–ø–∏—Å—å");
    echo str_repeat("-", 110) . "\n";
    
    foreach ($result['backups'] as $backup) {
        printf("%-40s %-10s %-8s %-20s %-20s\n",
            $backup['name'],
            $backup['records_count'],
            $backup['size_mb'],
            $backup['oldest_record'] ?: 'N/A',
            $backup['newest_record'] ?: 'N/A'
        );
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±–µ–∫–∞–ø–∞
 */
function restoreFromBackup(SortFixService $service, $backupName, $iblockId = null) {
    $scope = $iblockId ? "–∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}" : "–≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã";
    echo "=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–ï–ö–ê–ü–ê ({$scope}) ===\n\n";
    
    echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞ {$backupName}...\n";
    
    $result = $service->restoreFromBackup($backupName, $iblockId);
    
    if ($result['success']) {
        echo "‚úÖ " . $result['message'] . "\n";
        echo "üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " . $result['restored_count'] . "\n";
    } else {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∫–∞–ø–∞
 */
function deleteBackup(SortFixService $service, $backupName) {
    echo "=== –£–î–ê–õ–ï–ù–ò–ï –ë–ï–ö–ê–ü–ê ===\n\n";
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞ {$backupName}...\n";
    
    $result = $service->deleteBackup($backupName);
    
    if ($result['success']) {
        echo "‚úÖ " . $result['message'] . "\n";
    } else {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    echo "\n";
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
$service = new SortFixService();

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$command = $argv[1] ?? 'help';

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
$args = array_slice($argv, 2);
$options = [];
$params = [];

// –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
foreach ($args as $arg) {
    if (strpos($arg, '--') === 0) {
        $options[] = substr($arg, 2);
    } else {
        $params[] = $arg;
    }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
$iblockId = null;
$backupName = null;
$customBackupName = null;

switch ($command) {
    case 'stats':
        showStats($service);
        break;
        
    case 'check':
        $iblockId = isset($params[0]) && is_numeric($params[0]) ? (int)$params[0] : null;
        checkNeedsFixing($service, $iblockId);
        break;
        
    case 'fix':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è fix
        foreach ($params as $param) {
            if (is_numeric($param)) {
                $iblockId = (int)$param;
            }
        }
        
        $createBackup = in_array('backup', $options);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (!$iblockId) {
            echo "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.\n";
        } else {
            echo "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}.\n";
        }
        
        if ($createBackup) {
            echo "üì¶ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n";
        }
        
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ";
        $handle = fopen("php://stdin", "r");
        $line = fgets($handle);
        fclose($handle);
        
        if (trim(strtolower($line)) === 'y') {
            fixSort($service, $iblockId, $createBackup);
        } else {
            echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n";
        }
        break;
        
    case 'backup':
        $iblockId = isset($params[0]) && is_numeric($params[0]) ? (int)$params[0] : null;
        $customBackupName = isset($params[1]) ? $params[1] : null;
        
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —á–∏—Å–ª–æ–≤–æ–π, —Ç–æ —ç—Ç–æ –∏–º—è –±–µ–∫–∞–ø–∞
        if (isset($params[0]) && !is_numeric($params[0])) {
            $customBackupName = $params[0];
            $iblockId = null;
        }
        
        createBackup($service, $iblockId, $customBackupName);
        break;
        
    case 'backup-list':
        listBackups($service);
        break;
        
    case 'restore':
        if (empty($params[0])) {
            echo "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –±–µ–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n";
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php sort_fix.php restore <backup_name> [iblock_id]\n";
            exit(1);
        }
        
        $backupName = $params[0];
        $iblockId = isset($params[1]) && is_numeric($params[1]) ? (int)$params[1] : null;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $scope = $iblockId ? "–∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}" : "–í–°–ï–ô –¢–ê–ë–õ–ò–¶–´";
        echo "‚ö†Ô∏è  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ {$scope} –∏–∑ –±–µ–∫–∞–ø–∞ {$backupName}.\n";
        echo "–≠—Ç–æ –£–î–ê–õ–ò–¢ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–µ–∫–∞–ø–∞!\n";
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ";
        
        $handle = fopen("php://stdin", "r");
        $line = fgets($handle);
        fclose($handle);
        
        if (trim(strtolower($line)) === 'y') {
            restoreFromBackup($service, $backupName, $iblockId);
        } else {
            echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n";
        }
        break;
        
    case 'backup-delete':
        if (empty($params[0])) {
            echo "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –±–µ–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n";
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php sort_fix.php backup-delete <backup_name>\n";
            exit(1);
        }
        
        $backupName = $params[0];
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        echo "‚ö†Ô∏è  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –±–µ–∫–∞–ø {$backupName}.\n";
        echo "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n";
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ";
        
        $handle = fopen("php://stdin", "r");
        $line = fgets($handle);
        fclose($handle);
        
        if (trim(strtolower($line)) === 'y') {
            deleteBackup($service, $backupName);
        } else {
            echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n";
        }
        break;
        
    case 'help':
    default:
        showHelp();
        break;
}

require_once $_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/epilog_after.php"; 