#!/usr/bin/env php
<?php

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
$_SERVER["DOCUMENT_ROOT"] = realpath(__DIR__ . "/../../../../");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —è–¥—Ä–æ Bitrix
require_once $_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php";

use Bitrix\Main\Loader;
use Bitrix\SortFix\Services\SortFixService;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
if (!Loader::includeModule('bitrix.sortfix')) {
    echo "–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å bitrix.sortfix –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
    exit(1);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
 */
function showHelp() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php sort_fix.php [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]\n\n";
    echo "–ö–æ–º–∞–Ω–¥—ã:\n";
    echo "  stats                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º\n";
    echo "  check [iblock_id]        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞)\n";
    echo "  fix [iblock_id]          - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞)\n";
    echo "  help                     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
    echo "–ü—Ä–∏–º–µ—Ä—ã:\n";
    echo "  php sort_fix.php stats           # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n";
    echo "  php sort_fix.php check           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏–Ω—Ñ–æ–±–ª–æ–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n";
    echo "  php sort_fix.php check 384       # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ñ–æ–±–ª–æ–∫ 384\n";
    echo "  php sort_fix.php fix             # –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    echo "  php sort_fix.php fix 384         # –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ 384\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function showStats(SortFixService $service) {
    echo "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ò–ù–§–û–ë–õ–û–ö–û–í ===\n\n";
    
    $stats = $service->getElementsStats();
    
    echo "–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: " . $stats['total_elements'] . "\n\n";
    
    if (!empty($stats['iblock_stats'])) {
        printf("%-5s %-30s %-20s %-10s %-10s %-10s\n", 
            "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–≠–ª–µ–º–µ–Ω—Ç–æ–≤", "Min SORT", "Max SORT");
        echo str_repeat("-", 95) . "\n";
        
        foreach ($stats['iblock_stats'] as $iblock) {
            printf("%-5s %-30s %-20s %-10s %-10s %-10s\n",
                $iblock['IBLOCK_ID'],
                mb_substr($iblock['IBLOCK_NAME'], 0, 30),
                mb_substr($iblock['IBLOCK_CODE'], 0, 20),
                $iblock['element_count'],
                $iblock['min_sort'],
                $iblock['max_sort']
            );
        }
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function checkNeedsFixing(SortFixService $service, $iblockId = null) {
    echo "=== –ü–†–û–í–ï–†–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===\n\n";
    
    $check = $service->checkSortNeedsFixing($iblockId);
    
    if ($check['needs_fixing']) {
        echo "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:\n\n";
        
        if ($check['has_duplicates']) {
            echo "   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {$check['duplicates_count']} –≥—Ä—É–ø–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π\n";
        }
        
        if ($check['non_standard_count'] > 0) {
            echo "   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {$check['non_standard_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –Ω–µ –∫—Ä–∞—Ç–Ω–æ–π 100\n";
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
        if (!$iblockId && !empty($check['problem_iblocks'])) {
            echo "\nüìã –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–§–û–ë–õ–û–ö–ò:\n\n";
            
            printf("%-5s %-30s %-20s %-10s %-15s %-15s\n", 
                "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–≠–ª–µ–º–µ–Ω—Ç–æ–≤", "–î—É–±–ª–∏–∫–∞—Ç—ã", "–ù–µ–∫—Ä–∞—Ç–Ω—ã–µ 100");
            echo str_repeat("-", 100) . "\n";
            
            foreach ($check['problem_iblocks'] as $iblock) {
                $duplicates = $iblock['has_duplicates'] ? "–î–∞" : "–ù–µ—Ç";
                $nonStandard = $iblock['has_non_standard'] ? "–î–∞ ({$iblock['non_standard_count']})" : "–ù–µ—Ç";
                
                printf("%-5s %-30s %-20s %-10s %-15s %-15s\n",
                    $iblock['id'],
                    mb_substr($iblock['name'], 0, 30),
                    mb_substr($iblock['code'], 0, 20),
                    $iblock['total_elements'],
                    $duplicates,
                    $nonStandard
                );
            }
            
            echo "\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n";
            echo "   php sort_fix.php fix <IBLOCK_ID>\n";
        }
    } else {
        echo "‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ\n";
    }
    echo "\n";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function fixSort(SortFixService $service, $iblockId = null) {
    $scope = $iblockId ? "–∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}" : "–≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤";
    echo "=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò ({$scope}) ===\n\n";
    
    echo "–ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...\n";
    
    $result = $service->fixElementsSort($iblockId);
    
    if ($result['success']) {
        echo "‚úÖ " . $result['message'] . "\n";
    } else {
        echo "‚ùå " . $result['message'] . "\n";
        exit(1);
    }
    echo "\n";
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
$service = new SortFixService();

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$command = $argv[1] ?? 'help';
$iblockId = isset($argv[2]) && is_numeric($argv[2]) ? (int)$argv[2] : null;

switch ($command) {
    case 'stats':
        showStats($service);
        break;
        
    case 'check':
        checkNeedsFixing($service, $iblockId);
        break;
        
    case 'fix':
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (!$iblockId) {
            echo "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.\n";
        } else {
            echo "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ ID {$iblockId}.\n";
        }
        
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ";
        $handle = fopen("php://stdin", "r");
        $line = fgets($handle);
        fclose($handle);
        
        if (trim(strtolower($line)) === 'y') {
            fixSort($service, $iblockId);
        } else {
            echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n";
        }
        break;
        
    case 'help':
    default:
        showHelp();
        break;
}

require_once $_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/epilog_after.php"; 